# level 6kyu
# https://www.codewars.com/kata/546f922b54af40e1e90001da

# given a string, replace every letter with its position in the alphabet (as a string with spaces)
# if anything in the text isn't a letter, ignore it and don't return it.
# "a" = 1, "b" = 2, etc.

# lessons:
# - you can use .compact to remove nil values generated by a .map
#    but you might instead use a .select instead of .map
#
# - from string, you can access to all ascii values of every char with .each_byte
# - from a one character string, you can access to its ascii value with .ord

def alphabet_position(text)
  aux = text.downcase.each_byte.map do |c|
    c - 96 if c >= 97 && c <= 122
  end

  aux.compact.join(' ')
end

p alphabet_position("The sunset sets at twelve o' clock.") # "20 8 5 19 21 14 19 5 20 19 5 20 19 1 20 20 23 5 12 22 5 15 3 12 15 3 11")
p alphabet_position("-.-'") # ""

# other solution from codewars

def alphabet_position_2(text)
  text.upcase.chars.select { |c| ("A".."Z").include?(c) } .map { |c| c.ord-64 } .join(" ")
end
